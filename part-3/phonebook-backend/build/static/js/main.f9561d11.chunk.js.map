{"version":3,"sources":["components/contact.js","components/filter.js","components/contactform.js","services/api.js","components/app.js","index.js"],"names":["Contact","filter","contacts","deleteContact","contact","name","toLowerCase","includes","map","phoneNumber","value","id","onClick","e","Filter","text","onChanges","onChange","ContactForm","addContact","newName","newNumber","handleContactChange","handlePhoneChange","onSubmit","type","baseUrl","axios","get","newContact","post","delete","put","App","props","useState","persons","setPersons","setNewName","setNewNumber","filterName","searchName","dataHook","console","log","api","then","response","data","useEffect","checkIfExists","update","exists","forEach","person","updateContact","existingId","window","confirm","event","target","preventDefault","alert","contactObject","Math","floor","random","concat","ReactDOM","render","document","getElementById"],"mappings":"wJAqBeA,EAlBC,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,cAEhC,OACI,8BACKD,EAASD,QAAO,SAAAG,GAAO,uBACpBA,EAAQC,YADY,aACpB,EAAcC,cAAcC,SAASN,EAAOK,kBAC3CE,KAAI,SAAAJ,GAAO,OACR,+BACKA,EAAQC,KADb,KACqBD,EAAQK,YACzB,wBAAQC,MAAON,EAAQO,GAAIC,QAAU,SAACC,GAAD,OAAOV,EAAcU,EAAGT,EAAQO,KAArE,sBAFKP,EAAQO,UCUtBG,EAjBA,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMd,EAAuB,EAAvBA,OAAQe,EAAe,EAAfA,UAC3B,OACI,mCACI,iCACI,8BACKD,IAEL,uBACIL,MAAOT,EACPgB,SAAUD,UCkBfE,EA3BK,SAAC,GAA8E,IAA7EC,EAA4E,EAA5EA,WAAYC,EAAgE,EAAhEA,QAASC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,oBAAqBC,EAAuB,EAAvBA,kBACvE,OACI,mCACN,uBAAMC,SAAUL,EAAhB,UACE,wCAEQ,uBACIT,MAAOU,EACPH,SAAUK,OAGhB,gDAEI,uBACEZ,MAAOW,EACPJ,SAAUM,OAGtB,8BACD,wBAAQE,KAAK,SAAb,yB,gBCpBGC,EAAU,eAkBD,EAhBA,WACX,OAAOC,IAAMC,IAAIF,IAeN,EAZI,SAACG,GAChB,OAAOF,IAAMG,KAAKJ,EAASG,IAWhB,EARO,SAAClB,GACnB,OAAOgB,IAAMI,OAAN,UAAgBL,EAAhB,YAA2Bf,KAOvB,EAJO,SAACA,EAAIkB,GACvB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBf,GAAMkB,ICiH1BI,EA5HH,SAACC,GAAW,IAAD,EAEQC,mBAAS,IAFjB,mBAEfC,EAFe,KAENC,EAFM,OAGWF,mBAAS,cAHpB,mBAGZf,EAHY,KAGHkB,EAHG,OAIeH,mBAAS,sBAJxB,mBAIZd,EAJY,KAIDkB,EAJC,OAKcJ,mBAAS,IALvB,mBAKZK,EALY,KAKAC,EALA,KAObC,EAAW,WACbC,QAAQC,IAAI,UACZC,IAEKC,MAAK,SAAAC,GACFJ,QAAQC,IAAI,oBAAqBG,EAASC,MAC1CX,EAAWU,EAASC,UAIhCC,oBAAUP,EAAU,IAEpB,IA6BMQ,EAAgB,SAAChB,GACnB,IAAIiB,GAAS,EACTC,GAAS,EASb,OARAhB,EAAQiB,SAAQ,SAAAC,GAAW,IAAD,GAClB,UAAAA,EAAOjD,YAAP,eAAaC,iBAAkB4B,EAAM7B,KAAKC,gBAC1C8C,GAAS,EACLG,EAAcD,EAAO3C,MACrBwC,GAAS,OAGrBR,QAAQC,IAAI,mBAAoBO,EAAQC,IACzB,IAAXD,IAEgB,IAAXC,IAA8B,IAAXD,EADjB,EAIA,GAGTI,EAAgB,SAACC,GACnB,OAAIC,OAAOC,QAAP,UAAkBtC,EAAlB,oEAMAyB,EACmBW,EANG,CAClBnD,KAAMe,EACNX,YAAaY,EACbV,GAAI6C,IAIHV,MAAK,SAAAC,GACFJ,QAAQC,IAAI,wBAAyBG,EAASC,MAC9CN,OAED,GAEA,GAwBlB,OACC,gCACM,wCACI,cAAC,EAAD,CAAQ3B,KAAK,uBAAuBd,OAAQuC,EAAYxB,UALrC,SAAC2C,GAAD,OAAWlB,EAAWkB,EAAMC,OAAOlD,UAMhE,2CACU,cAAC,EAAD,CAAaS,WA5FF,SAACwC,GAIhB,GAHAA,EAAME,iBACNlB,QAAQC,IAAI,iBAAkBe,EAAMC,QAEpB,KAAZxC,EACA0C,MAAM,oDACL,CACD,IAAMC,EAAgB,CAClBpD,GAAIqD,KAAKC,MAAMD,KAAKE,UACpB7D,KAAMe,EACNX,YAAaY,GAEZ6B,EAAca,IAEflB,EACgBkB,GACXjB,MAAK,SAAAC,GACFJ,QAAQC,IAAI,yBAA0BG,EAASC,MAC/CX,EAAWD,EAAQ+B,OAAOpB,EAASC,UAM/CV,EAAW,IACXC,EAAa,MAoETnB,QAASA,EACTC,UAAWA,EACXC,oBAdgB,SAACqC,GAAD,OAAWrB,EAAWqB,EAAMC,OAAOlD,QAenDa,kBAbc,SAACoC,GAAD,OAAWpB,EAAaoB,EAAMC,OAAOlD,UAcjE,yCACM,6BACI,cAAC,EAAD,CAAST,OAAQuC,EAAYtC,SAAUkC,EAASjC,cA/BlC,SAACwD,EAAOX,GAChCW,EAAME,iBACAlB,QAAQC,IAAI,iBAAkBe,EAAMC,QAChCH,OAAOC,QAAQ,iDACfb,EACeG,GACdF,MAAM,SAAAC,GACHJ,QAAQC,IAAI,2BAA4BG,EAASC,MACjDN,gBC1EhB0B,IAASC,OACR,cAAC,EAAD,CAAKnE,SAxBW,CACb,CACIS,GAAI,EACJN,KAAM,gBACNI,YAAa,oBAEjB,CACIE,GAAI,EACJN,KAAM,eACNI,YAAa,kBAEjB,CACIE,GAAI,EACJN,KAAM,aACNI,YAAa,kBAEjB,CACIE,GAAI,EACJN,KAAM,aACNI,YAAa,qBAMpB6D,SAASC,eAAe,W","file":"static/js/main.f9561d11.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Contact = ({filter, contacts, deleteContact}) => {\n\n    return (\n        <div>\n            {contacts.filter(contact => \n                contact.name?.toLowerCase().includes(filter.toLowerCase()))\n                .map(contact =>\n                    <li key={contact.id}>\n                        {contact.name}, {contact.phoneNumber}\n                        <button value={contact.id} onClick={((e) => deleteContact(e, contact.id))}>Delete</button>\n                    </li>\n            )\n            }\n        </div>\n    )\n\n}\n\nexport default Contact","import React from 'react'\n\n\nconst Filter = ({text, filter, onChanges}) => {\n    return (\n        <>\n            <form>\n                <div>\n                    {text}\n                </div>\n                <input\n                    value={filter}\n                    onChange={onChanges}\n                />\n            </form>\n        </>\n    )\n}\n\n\nexport default Filter","import React from 'react'\n\n\nconst ContactForm = ({addContact, newName, newNumber, handleContactChange, handlePhoneChange}) => {\n    return (\n        <>\n\t\t<form onSubmit={addContact}>\n\t\t  <div>\n\t\t\tName: \n            <input \n                value={newName}\n                onChange={handleContactChange}\n            />\n\t\t  </div>\n          <div>\n              Phone number:\n              <input\n                value={newNumber}\n                onChange={handlePhoneChange}\n              />\n          </div>\n\t\t  <div>\n\t\t\t<button type=\"submit\">add</button>\n\t\t  </div>\n\t\t</form>\n        </>\n    )\n}\n\n\nexport default ContactForm","import axios from 'axios';\n\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n    return axios.get(baseUrl);\n}\n\nconst addContact = (newContact) => {\n    return axios.post(baseUrl, newContact);\n}\n\nconst deleteContact = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updateContact = (id, newContact) => {\n    return axios.put(`${baseUrl}/${id}`, newContact);\n}\n\nexport default {\n    getAll: getAll,\n    addContact: addContact,\n    deleteContact: deleteContact,\n    updateContact: updateContact\n}","import React, {useState, useEffect} from 'react';\nimport Contact from './contact';\nimport Filter from './filter';\nimport ContactForm from './contactform';\nimport api from '../services/api';\n\nconst App = (props) => {\n\n\tconst [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('a new name')\n    const [newNumber, setNewNumber] = useState('a new phone number')\n    const [filterName, searchName] = useState('');\n\n    const dataHook = () => {\n        console.log('effect');\n        api\n            .getAll()\n            .then(response => {\n                console.log('promise fulfilled', response.data);\n                setPersons(response.data);\n            })\n    }\n\n    useEffect(dataHook, []);\n\n    const addContact = (event) => {\n        event.preventDefault();\n        console.log('button clicked', event.target);\n\n        if (newName === '')\n            alert('The name must be at least one character long')\n        else {\n            const contactObject = {\n                id: Math.floor(Math.random()),\n                name: newName,\n                phoneNumber: newNumber,\n            }\n            if (!checkIfExists(contactObject))\n            {\n                api\n                    .addContact(contactObject)\n                    .then(response => {\n                        console.log('POST Promise fulfilled', response.data);\n                        setPersons(persons.concat(response.data))\n                    })\n                // setPersons(persons.concat(contactObject));\n            }\n            // else\n            //     alert(newName + ' already exists');\n            setNewName('');\n            setNewNumber('');\n        }\n    }\n\n    const checkIfExists = (props) => {\n        let update = false;\n        let exists = false;\n        persons.forEach(person => {\n            if (person.name?.toLowerCase() === props.name.toLowerCase()) {\n                exists = true;\n                if (updateContact(person.id))\n                    update = true;\n            }\n        })\n        console.log(\"UPDATE && EXISTS\", update, exists);\n        if (update === true)\n            return 1\n        else if (exists === true && update === false)\n            return 1\n        else \n            return 0\n    }\n\n    const updateContact = (existingId) => {\n        if (window.confirm(`${newName} is already in the phonebook, replace old number with new one?`)) {\n            const contactObject = {\n                name: newName,\n                phoneNumber: newNumber,\n                id: existingId\n            }\n            api\n                .updateContact(existingId, contactObject)\n                .then(response => {\n                    console.log('PUT promise fulfilled', response.data);\n                    dataHook();\n                })\n            return 1\n        } else {\n            return 0\n        }\n\n    }\n\n    const deleteContact = (event, data) => {\n\t\tevent.preventDefault()\n        console.log('button clicked', event.target)\n        if (window.confirm('Are you sure you want to delete the contact?')) {\n            api\n            .deleteContact(data)\n            .then (response => {\n                console.log(\"DELETE promise fulfilled\", response.data);\n                dataHook()\n            })\n        }\n    }\n\n    const handleContactChange = (event) => setNewName(event.target.value);\n    \n    const handlePhoneChange = (event) => setNewNumber(event.target.value);\n\n    const handleFilterChange = (event) => searchName(event.target.value);\n\n\treturn (\n\t\t<div>\n        <h2>Filter</h2>\n            <Filter text=\"Search for contact: \" filter={filterName} onChanges={handleFilterChange}/>\n\t\t<h2>Phonebook</h2>\n            <ContactForm addContact={addContact} \n                newName={newName} \n                newNumber={newNumber} \n                handleContactChange={handleContactChange} \n                handlePhoneChange={handlePhoneChange}/>\n\t\t<h2>Numbers</h2>\n        <ul>\n            <Contact filter={filterName} contacts={persons} deleteContact={deleteContact}/>\n        </ul>\n\t  </div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/app'\n\nconst contacts = [\n    {\n        id: 1,\n        name: 'Gerhard Molin',\n        phoneNumber: '+358 45 220 3414'\n    },\n    {\n        id: 2,\n        name: 'Eric Schmidt',\n        phoneNumber: '+1 45 220 3414'\n    },\n    {\n        id: 3,\n        name: 'Lerry Page',\n        phoneNumber: '+1 46 221 3414'\n    },\n    {\n        id: 4,\n        name: 'Steve Jobs',\n        phoneNumber: '+1 42 100 3214'\n    }\n]\n\nReactDOM.render(\n\t<App contacts = {contacts}/>,\n\tdocument.getElementById('root')\n)"],"sourceRoot":""}